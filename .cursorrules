# Bitcoin Festival Price Tracker Development Specification for AI Agent

## Agent Capabilities Reference

1. Vector Search: Utilize vector DB to find similar code patterns
2. Direct File Operations: Modify/create files in codebase
3. Auto-iteration: Self-correct based on lint feedback

## Initial Analysis Instructions

1. Codebase Search Parameters

   ```json
   {
     "primary_path": "src/",
     "search_depth": 2,
     "file_types": [".py"],
     "priority_patterns": [
       "class definitions",
       "interface implementations",
       "error handling patterns"
     ]
   }
   ```

2. Context Assembly
   ```json
   {
     "required_files": [
       "main architectural components",
       "related domain models",
       "relevant interfaces",
       "error handling utilities"
     ],
     "max_context_files": 10,
     "code_pattern_weight": 0.8,
     "naming_convention_weight": 0.7
   }
   ```

## Technical Framework

1. Core Technologies

   ```json
   {
     "language": "Python",
     "version": ">=3.8",
     "key_frameworks": {
       "web": "FastAPI",
       "ui": "Streamlit",
       "database": "SQLite"
     }
   }
   ```

2. Code Structure Requirements
   ```json
   {
     "max_line_length": 100,
     "indentation": "spaces",
     "indentation_size": 4,
     "code_style": {
       "nesting": "minimize",
       "prefer_early_returns": true,
       "max_indent_level": 3
     },
     "type_system": {}
   }
   ```

## Implementation Process

1. Pre-Generation Analysis

   ```json
   {
     "vector_search_queries": [
       "similar feature implementations",
       "error handling patterns",
       "test structures"
     ],
     "pattern_recognition": {
       "code_style": true,
       "error_handling": true,
       "type_usage": true
     }
   }
   ```

2. Generation Rules

   ```json
   {
     "test_requirements": {
       "coverage_target": 0.8,
       "test_tools": ["pytest", "unittest.mock"],
       "test_patterns": ["positive_cases", "negative_cases", "edge_cases"],
       "test_naming": {
         "function_test": "test_<func_name>",
         "method_test": "test_<class_name>_<func_name>",
         "benchmark_test": "benchmark_<func_name>",
         "example_test": "example_<func_name>"
       }
     },
     "documentation": {
       "required_sections": [
         "function_purpose",
         "parameters",
         "return_values",
         "error_conditions"
       ]
     }
   }
   ```

3. Quality Verification
   ```json
   {
     "lint_checks": ["flake8", "pylint", "mypy"],
     "auto_iteration_triggers": {
       "lint_errors": true,
       "test_failures": true,
       "style_violations": true
     },
     "performance_checks": ["complexity", "memory_usage", "concurrent_safety"]
   }
   ```

## Iteration Protocol

1. Error Handling

   ```json
   {
     "retry_attempts": 3,
     "error_categories": {
       "lint": "auto_fix",
       "compile": "analyze_and_correct",
       "test": "regenerate_with_patterns"
     }
   }
   ```

2. Feedback Integration
   ```json
   {
     "learning_parameters": {
       "pattern_reinforcement": true,
       "error_pattern_memory": true,
       "style_adaptation": true
     }
   }
   ```

## Success Criteria

1. All lint checks pass
2. Test coverage meets target
3. Documentation complete and follows PEP257
4. Follows existing patterns
5. Performance metrics within bounds
